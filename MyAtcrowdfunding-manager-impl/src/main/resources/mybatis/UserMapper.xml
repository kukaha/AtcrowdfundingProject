<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.kukaha.atcrowdfunding.manager.dao.UserMapper">
  <resultMap id="BaseResultMap" type="cn.kukaha.atcrowdfunding.bean.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="loginacct" jdbcType="VARCHAR" property="loginacct" />
    <result column="userpswd" jdbcType="CHAR" property="userpswd" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="createtime" jdbcType="CHAR" property="createtime" />
  </resultMap>
<!--   <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" useGeneratedKeys="true" keyPorperty="id"> -->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.kukaha.atcrowdfunding.bean.User">
    insert into t_user (id, loginacct, userpswd, 
      username, email, createtime
      )
    values (#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR}, #{userpswd,jdbcType=CHAR}, 
      #{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.kukaha.atcrowdfunding.bean.User">
    update t_user
    set loginacct = #{loginacct,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
  </select>
  
  <select id="queryUserlogin" parameterType="map" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime from t_user where 
    loginacct=#{loginacct} and userpswd=#{userpswd}
  </select>
  
  <select id="queryUserNameLogin" parameterType="map" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime from t_user where 
    loginacct=#{loginacct}
  </select>
  
<!--   <select id="queryList" resultMap="BaseResultMap"> -->
<!--     select id, loginacct, userpswd, username, email, createtime from t_user limit #{startIndex},#{pagesize} -->
<!--   </select> -->
  
<!--   <select id="queryCount" resultType="int"> -->
<!--     select count(*) from t_user -->
<!--   </select> -->

  <select id="queryList" parameterType="map" resultMap="BaseResultMap">
    select id, loginacct, userpswd, 
    username, email, createtime 
    from t_user 
    <where>
   		<if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
    </where>
     order by createtime desc
     limit #{startIndex},#{pagesize}
  </select>
  
  <select id="queryCount" parameterType="map" resultType="int">
    select count(*) from t_user 
    <where>
   		<if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
    </where>
  </select>
  
<!--   <delete id="deleteBatchUserByVO"> -->
<!--       delete from t_user where id in  -->
<!--       <foreach collection="datas" open="(" close=")" separator="," item="user"> -->
<!--           #{user.id} -->
<!--       </foreach> -->
<!--   </delete> -->

  <delete id="deleteBatchUserByVO">
      delete from t_user where id in 
      <foreach collection="userList" open="(" close=")" separator="," item="user">
          #{user.id}
      </foreach>
  </delete>
  
  <select id="queryAllRole" resultType="Role">
    select id,name from t_role 
  </select>
  
  <select id="queryRoleByUserId" parameterType="int" resultType="int">
    select roleid from t_user_role where userid=#{id} 
  </select>
  
  <insert id="saveUserRoleRelationship" >
      <foreach collection="data.ids" item="roleid" separator=";">
          insert into t_user_role(userid,roleid) values(#{userid},#{roleid})
      </foreach>
  </insert>
  
  <delete id="deleteUserRoleRelationship">
      delete from t_user_role where userid=#{userid} and roleid in
      <foreach collection="data.ids" item="roleid" open="(" separator="," close=")">
          #{roleid}
      </foreach>
  </delete>
</mapper>